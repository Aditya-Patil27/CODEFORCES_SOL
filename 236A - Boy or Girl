#include<iostream>
#include<vector>
#include<unordered_set>
using namespace std;

void solve() {
    int n;
    cin >> n;
    vector<int> a(n);
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    
    vector<int> first_pos(n + 1, -1);
    vector<int> last_pos(n + 1, -1);
    
    for(int i = 0; i < n; i++) {
        if(first_pos[a[i]] == -1) {
            first_pos[a[i]] = i;
        }
        last_pos[a[i]] = i;
    }
    
    int distinct_count = 0;
    for(int i = 1; i <= n; i++) {
        if(first_pos[i] != -1) {
            distinct_count++;
        }
    }
    
    int initial_score = n - distinct_count;
    int max_score = initial_score;
    int best_l = 0, best_r = 0;
    int max_removed_length = 0;
    
    for(int i = 1; i <= n; i++) {
        if(first_pos[i] == -1) continue;
        
        int l = first_pos[i] + 1;
        int r = last_pos[i] + 1;
        int segment_length = r - l + 1;
        
        int removed_distinct = 0;
        for(int j = 1; j <= n; j++) {
            if(first_pos[j] != -1 && 
               first_pos[j] + 1 >= l && 
               last_pos[j] + 1 <= r) {
                removed_distinct++;
            }
        }
        
        int new_length = n - segment_length;
        int new_distinct = distinct_count - removed_distinct;
        int new_score = new_length - new_distinct;
        
        if(new_score > max_score || 
           (new_score == max_score && segment_length > max_removed_length)) {
            max_score = new_score;
            best_l = l;
            best_r = r;
            max_removed_length = segment_length;
        }
    }
    
    if(best_l == 0) {
        cout << "0\n";
    } else {
        cout << best_l << " " << best_r << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int t;
    cin >> t;
    while(t--) {
        solve();
    }
    return 0;
}
